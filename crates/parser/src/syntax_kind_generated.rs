//! //! This module bridges the gap between pg_query.rs nodes, and the
//! `SyntaxKind`
//! //! cstree requires.
//! //! The file is generated from the libg_query proto
use cstree::Syntax;
use pg_query::{protobuf::ScanToken, NodeEnum};

use crate::syntax_kind_codegen::{SyntaxKind, SyntaxKindType};

// /// An u32 enum of all valid syntax elements (nodes and tokens) of the postgres
// /// sql dialect, and a few custom ones that are not parsed by pg_query.rs, such
// /// as `Whitespace`.
// #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Syntax)]
// #[repr(u32)]
// pub enum SyntaxKind {
//     SourceFile,
//     Comment,
//     Whitespace,
//     Newline,
//     Tab,
//     Stmt,
//     Alias,
//     RangeVar,
//     TableFunc,
//     Var,
//     Param,
//     Aggref,
//     GroupingFunc,
//     WindowFunc,
//     SubscriptingRef,
//     FuncExpr,
//     NamedArgExpr,
//     OpExpr,
//     DistinctExpr,
//     NullIfExpr,
//     ScalarArrayOpExpr,
//     BoolExpr,
//     SubLink,
//     SubPlan,
//     AlternativeSubPlan,
//     FieldSelect,
//     FieldStore,
//     RelabelType,
//     CoerceViaIo,
//     ArrayCoerceExpr,
//     ConvertRowtypeExpr,
//     CollateExpr,
//     CaseExpr,
//     CaseWhen,
//     CaseTestExpr,
//     ArrayExpr,
//     RowExpr,
//     RowCompareExpr,
//     CoalesceExpr,
//     MinMaxExpr,
//     SqlvalueFunction,
//     XmlExpr,
//     NullTest,
//     BooleanTest,
//     CoerceToDomain,
//     CoerceToDomainValue,
//     SetToDefault,
//     CurrentOfExpr,
//     NextValueExpr,
//     InferenceElem,
//     TargetEntry,
//     RangeTblRef,
//     JoinExpr,
//     FromExpr,
//     OnConflictExpr,
//     IntoClause,
//     MergeAction,
//     RawStmt,
//     Query,
//     InsertStmt,
//     DeleteStmt,
//     UpdateStmt,
//     MergeStmt,
//     SelectStmt,
//     ReturnStmt,
//     PlassignStmt,
//     AlterTableStmt,
//     AlterTableCmd,
//     AlterDomainStmt,
//     SetOperationStmt,
//     GrantStmt,
//     GrantRoleStmt,
//     AlterDefaultPrivilegesStmt,
//     ClosePortalStmt,
//     ClusterStmt,
//     CopyStmt,
//     CreateStmt,
//     DefineStmt,
//     DropStmt,
//     TruncateStmt,
//     CommentStmt,
//     FetchStmt,
//     IndexStmt,
//     CreateFunctionStmt,
//     AlterFunctionStmt,
//     DoStmt,
//     RenameStmt,
//     RuleStmt,
//     NotifyStmt,
//     ListenStmt,
//     UnlistenStmt,
//     TransactionStmt,
//     ViewStmt,
//     LoadStmt,
//     CreateDomainStmt,
//     CreatedbStmt,
//     DropdbStmt,
//     VacuumStmt,
//     ExplainStmt,
//     CreateTableAsStmt,
//     CreateSeqStmt,
//     AlterSeqStmt,
//     VariableSetStmt,
//     VariableShowStmt,
//     DiscardStmt,
//     CreateTrigStmt,
//     CreatePlangStmt,
//     CreateRoleStmt,
//     AlterRoleStmt,
//     DropRoleStmt,
//     LockStmt,
//     ConstraintsSetStmt,
//     ReindexStmt,
//     CheckPointStmt,
//     CreateSchemaStmt,
//     AlterDatabaseStmt,
//     AlterDatabaseRefreshCollStmt,
//     AlterDatabaseSetStmt,
//     AlterRoleSetStmt,
//     CreateConversionStmt,
//     CreateCastStmt,
//     CreateOpClassStmt,
//     CreateOpFamilyStmt,
//     AlterOpFamilyStmt,
//     PrepareStmt,
//     ExecuteStmt,
//     DeallocateStmt,
//     DeclareCursorStmt,
//     CreateTableSpaceStmt,
//     DropTableSpaceStmt,
//     AlterObjectDependsStmt,
//     AlterObjectSchemaStmt,
//     AlterOwnerStmt,
//     AlterOperatorStmt,
//     AlterTypeStmt,
//     DropOwnedStmt,
//     ReassignOwnedStmt,
//     CompositeTypeStmt,
//     CreateEnumStmt,
//     CreateRangeStmt,
//     AlterEnumStmt,
//     AlterTsdictionaryStmt,
//     AlterTsconfigurationStmt,
//     CreateFdwStmt,
//     AlterFdwStmt,
//     CreateForeignServerStmt,
//     AlterForeignServerStmt,
//     CreateUserMappingStmt,
//     AlterUserMappingStmt,
//     DropUserMappingStmt,
//     AlterTableSpaceOptionsStmt,
//     AlterTableMoveAllStmt,
//     SecLabelStmt,
//     CreateForeignTableStmt,
//     ImportForeignSchemaStmt,
//     CreateExtensionStmt,
//     AlterExtensionStmt,
//     AlterExtensionContentsStmt,
//     CreateEventTrigStmt,
//     AlterEventTrigStmt,
//     RefreshMatViewStmt,
//     ReplicaIdentityStmt,
//     AlterSystemStmt,
//     CreatePolicyStmt,
//     AlterPolicyStmt,
//     CreateTransformStmt,
//     CreateAmStmt,
//     CreatePublicationStmt,
//     AlterPublicationStmt,
//     CreateSubscriptionStmt,
//     AlterSubscriptionStmt,
//     DropSubscriptionStmt,
//     CreateStatsStmt,
//     AlterCollationStmt,
//     CallStmt,
//     AlterStatsStmt,
//     AExpr,
//     ColumnRef,
//     ParamRef,
//     FuncCall,
//     AStar,
//     AIndices,
//     AIndirection,
//     AArrayExpr,
//     ResTarget,
//     MultiAssignRef,
//     TypeCast,
//     CollateClause,
//     SortBy,
//     WindowDef,
//     RangeSubselect,
//     RangeFunction,
//     RangeTableSample,
//     RangeTableFunc,
//     RangeTableFuncCol,
//     TypeName,
//     ColumnDef,
//     IndexElem,
//     StatsElem,
//     Constraint,
//     DefElem,
//     RangeTblEntry,
//     RangeTblFunction,
//     TableSampleClause,
//     WithCheckOption,
//     SortGroupClause,
//     GroupingSet,
//     WindowClause,
//     ObjectWithArgs,
//     AccessPriv,
//     CreateOpClassItem,
//     TableLikeClause,
//     FunctionParameter,
//     LockingClause,
//     RowMarkClause,
//     XmlSerialize,
//     WithClause,
//     InferClause,
//     OnConflictClause,
//     CtesearchClause,
//     CtecycleClause,
//     CommonTableExpr,
//     MergeWhenClause,
//     RoleSpec,
//     TriggerTransition,
//     PartitionElem,
//     PartitionSpec,
//     PartitionBoundSpec,
//     PartitionRangeDatum,
//     PartitionCmd,
//     VacuumRelation,
//     PublicationObjSpec,
//     PublicationTable,
//     InlineCodeBlock,
//     CallContext,
//     Integer,
//     Float,
//     Boolean,
//     String,
//     BitString,
//     List,
//     IntList,
//     OidList,
//     AConst,
//     Nul,
//     Ascii37,
//     Ascii40,
//     Ascii41,
//     Ascii42,
//     Ascii43,
//     Ascii44,
//     Ascii45,
//     Ascii46,
//     Ascii47,
//     Ascii58,
//     Ascii59,
//     Ascii60,
//     Ascii61,
//     Ascii62,
//     Ascii63,
//     Ascii91,
//     Ascii92,
//     Ascii93,
//     Ascii94,
//     Ident,
//     Uident,
//     Fconst,
//     Sconst,
//     Usconst,
//     Bconst,
//     Xconst,
//     Op,
//     Iconst,
//     Typecast,
//     DotDot,
//     ColonEquals,
//     EqualsGreater,
//     LessEquals,
//     GreaterEquals,
//     NotEquals,
//     SqlComment,
//     CComment,
//     AbortP,
//     AbsoluteP,
//     Access,
//     Action,
//     AddP,
//     Admin,
//     After,
//     Aggregate,
//     All,
//     Also,
//     Alter,
//     Always,
//     Analyse,
//     Analyze,
//     And,
//     Any,
//     Array,
//     As,
//     Asc,
//     Asensitive,
//     Assertion,
//     Assignment,
//     Asymmetric,
//     Atomic,
//     At,
//     Attach,
//     Attribute,
//     Authorization,
//     Backward,
//     Before,
//     BeginP,
//     Between,
//     Bigint,
//     Binary,
//     Bit,
//     BooleanP,
//     Both,
//     Breadth,
//     By,
//     Cache,
//     Call,
//     Called,
//     Cascade,
//     Cascaded,
//     Case,
//     Cast,
//     CatalogP,
//     Chain,
//     CharP,
//     Character,
//     Characteristics,
//     Check,
//     Checkpoint,
//     Class,
//     Close,
//     Cluster,
//     Coalesce,
//     Collate,
//     Collation,
//     Column,
//     Columns,
//     Comments,
//     Commit,
//     Committed,
//     Compression,
//     Concurrently,
//     Configuration,
//     Conflict,
//     Connection,
//     Constraints,
//     ContentP,
//     ContinueP,
//     ConversionP,
//     Copy,
//     Cost,
//     Create,
//     Cross,
//     Csv,
//     Cube,
//     CurrentP,
//     CurrentCatalog,
//     CurrentDate,
//     CurrentRole,
//     CurrentSchema,
//     CurrentTime,
//     CurrentTimestamp,
//     CurrentUser,
//     Cursor,
//     Cycle,
//     DataP,
//     Database,
//     DayP,
//     Deallocate,
//     Dec,
//     DecimalP,
//     Declare,
//     Default,
//     Defaults,
//     Deferrable,
//     Deferred,
//     Definer,
//     DeleteP,
//     Delimiter,
//     Delimiters,
//     Depends,
//     Depth,
//     Desc,
//     Detach,
//     Dictionary,
//     DisableP,
//     Discard,
//     Distinct,
//     Do,
//     DocumentP,
//     DomainP,
//     DoubleP,
//     Drop,
//     Each,
//     Else,
//     EnableP,
//     Encoding,
//     Encrypted,
//     EndP,
//     EnumP,
//     Escape,
//     Event,
//     Except,
//     Exclude,
//     Excluding,
//     Exclusive,
//     Execute,
//     Exists,
//     Explain,
//     Expression,
//     Extension,
//     External,
//     Extract,
//     FalseP,
//     Family,
//     Fetch,
//     Filter,
//     Finalize,
//     FirstP,
//     FloatP,
//     Following,
//     For,
//     Force,
//     Foreign,
//     Forward,
//     Freeze,
//     From,
//     Full,
//     Function,
//     Functions,
//     Generated,
//     Global,
//     Grant,
//     Granted,
//     Greatest,
//     GroupP,
//     Grouping,
//     Groups,
//     Handler,
//     Having,
//     HeaderP,
//     Hold,
//     HourP,
//     IdentityP,
//     IfP,
//     Ilike,
//     Immediate,
//     Immutable,
//     ImplicitP,
//     ImportP,
//     InP,
//     Include,
//     Including,
//     Increment,
//     Index,
//     Indexes,
//     Inherit,
//     Inherits,
//     Initially,
//     InlineP,
//     InnerP,
//     Inout,
//     InputP,
//     Insensitive,
//     Insert,
//     Instead,
//     IntP,
//     Intersect,
//     Interval,
//     Into,
//     Invoker,
//     Is,
//     Isnull,
//     Isolation,
//     Join,
//     Key,
//     Label,
//     Language,
//     LargeP,
//     LastP,
//     LateralP,
//     Leading,
//     Leakproof,
//     Least,
//     Left,
//     Level,
//     Like,
//     Limit,
//     Listen,
//     Load,
//     Local,
//     Localtime,
//     Localtimestamp,
//     Location,
//     LockP,
//     Locked,
//     Logged,
//     Mapping,
//     Match,
//     Matched,
//     Materialized,
//     Maxvalue,
//     Merge,
//     Method,
//     MinuteP,
//     Minvalue,
//     Mode,
//     MonthP,
//     Move,
//     NameP,
//     Names,
//     National,
//     Natural,
//     Nchar,
//     New,
//     Next,
//     Nfc,
//     Nfd,
//     Nfkc,
//     Nfkd,
//     No,
//     None,
//     Normalize,
//     Normalized,
//     Not,
//     Nothing,
//     Notify,
//     Notnull,
//     Nowait,
//     NullP,
//     Nullif,
//     NullsP,
//     Numeric,
//     ObjectP,
//     Of,
//     Off,
//     Offset,
//     Oids,
//     Old,
//     On,
//     Only,
//     Operator,
//     Option,
//     Options,
//     Or,
//     Order,
//     Ordinality,
//     Others,
//     OutP,
//     OuterP,
//     Over,
//     Overlaps,
//     Overlay,
//     Overriding,
//     Owned,
//     Owner,
//     Parallel,
//     Parameter,
//     Parser,
//     Partial,
//     Partition,
//     Passing,
//     Password,
//     Placing,
//     Plans,
//     Policy,
//     Position,
//     Preceding,
//     Precision,
//     Preserve,
//     Prepare,
//     Prepared,
//     Primary,
//     Prior,
//     Privileges,
//     Procedural,
//     Procedure,
//     Procedures,
//     Program,
//     Publication,
//     Quote,
//     Range,
//     Read,
//     Real,
//     Reassign,
//     Recheck,
//     Recursive,
//     RefP,
//     References,
//     Referencing,
//     Refresh,
//     Reindex,
//     RelativeP,
//     Release,
//     Rename,
//     Repeatable,
//     Replace,
//     Replica,
//     Reset,
//     Restart,
//     Restrict,
//     Return,
//     Returning,
//     Returns,
//     Revoke,
//     Right,
//     Role,
//     Rollback,
//     Rollup,
//     Routine,
//     Routines,
//     Row,
//     Rows,
//     Rule,
//     Savepoint,
//     Schema,
//     Schemas,
//     Scroll,
//     Search,
//     SecondP,
//     Security,
//     Select,
//     Sequence,
//     Sequences,
//     Serializable,
//     Server,
//     Session,
//     SessionUser,
//     Set,
//     Sets,
//     Setof,
//     Share,
//     Show,
//     Similar,
//     Simple,
//     Skip,
//     Smallint,
//     Snapshot,
//     Some,
//     SqlP,
//     Stable,
//     StandaloneP,
//     Start,
//     Statement,
//     Statistics,
//     Stdin,
//     Stdout,
//     Storage,
//     Stored,
//     StrictP,
//     StripP,
//     Subscription,
//     Substring,
//     Support,
//     Symmetric,
//     Sysid,
//     SystemP,
//     Table,
//     Tables,
//     Tablesample,
//     Tablespace,
//     Temp,
//     Template,
//     Temporary,
//     TextP,
//     Then,
//     Ties,
//     Time,
//     Timestamp,
//     To,
//     Trailing,
//     Transaction,
//     Transform,
//     Treat,
//     Trigger,
//     Trim,
//     TrueP,
//     Truncate,
//     Trusted,
//     TypeP,
//     TypesP,
//     Uescape,
//     Unbounded,
//     Uncommitted,
//     Unencrypted,
//     Union,
//     Unique,
//     Unknown,
//     Unlisten,
//     Unlogged,
//     Until,
//     Update,
//     User,
//     Using,
//     Vacuum,
//     Valid,
//     Validate,
//     Validator,
//     ValueP,
//     Values,
//     Varchar,
//     Variadic,
//     Varying,
//     Verbose,
//     VersionP,
//     View,
//     Views,
//     Volatile,
//     When,
//     Where,
//     WhitespaceP,
//     Window,
//     With,
//     Within,
//     Without,
//     Work,
//     Wrapper,
//     Write,
//     XmlP,
//     Xmlattributes,
//     Xmlconcat,
//     Xmlelement,
//     Xmlexists,
//     Xmlforest,
//     Xmlnamespaces,
//     Xmlparse,
//     Xmlpi,
//     Xmlroot,
//     Xmlserialize,
//     Xmltable,
//     YearP,
//     YesP,
//     Zone,
//     NotLa,
//     NullsLa,
//     WithLa,
//     ModeTypeName,
//     ModePlpgsqlExpr,
//     ModePlpgsqlAssign1,
//     ModePlpgsqlAssign2,
//     ModePlpgsqlAssign3,
//     Uminus,
// }

// ///
// ///  Kind of a `SyntaxKind`
// ///  This is the only manual definition required for properly creating a concrete
// /// syntax tree.
// ///  If a token is of type `Follow`, it is not immediately applied to the syntax
// /// tree, but put into
// ///  a buffer. Before the next node is started, all buffered tokens are applied
// /// to the syntax tree
// ///  at the depth of the node that is opened next.
// ///
// ///  For example, in `select * from contact;`, the whitespace between `*` and
// /// `from` should be a direct
// ///  child of the `SelectStmt` node. Without this concept, it would be put into
// /// the `ColumnRef`
// ///  node.
// ///
// ///  SelectStmt@0..22
// ///    Select@0..6 "select"
// ///    Whitespace@6..7 " "
// ///    ResTarget@7..8
// ///      ColumnRef@7..8
// ///        Ascii42@7..8 "*"
// ///    Whitespace@8..9 " "
// ///    From@9..13 "from"
// ///   Whitespace@13..14 " "
// ///    RangeVar@14..21
// ///      Ident@14..21 "contact"
// ///    Ascii59@21..22 ";"
// pub enum SyntaxKindType {
//     Follow,
//     Close,
// }

impl SyntaxKind {
    /// Converts a `pg_query` node to a `SyntaxKind`
    // pub fn new_from_pg_query_node(node: &NodeEnum) -> Self {
    //     match node {
    //         NodeEnum::Alias(_) => SyntaxKind::Alias,
    //         NodeEnum::RangeVar(_) => SyntaxKind::RangeVar,
    //         NodeEnum::TableFunc(_) => SyntaxKind::TableFunc,
    //         NodeEnum::Var(_) => SyntaxKind::Var,
    //         NodeEnum::Param(_) => SyntaxKind::Param,
    //         NodeEnum::Aggref(_) => SyntaxKind::Aggref,
    //         NodeEnum::GroupingFunc(_) => SyntaxKind::GroupingFunc,
    //         NodeEnum::WindowFunc(_) => SyntaxKind::WindowFunc,
    //         NodeEnum::SubscriptingRef(_) => SyntaxKind::SubscriptingRef,
    //         NodeEnum::FuncExpr(_) => SyntaxKind::FuncExpr,
    //         NodeEnum::NamedArgExpr(_) => SyntaxKind::NamedArgExpr,
    //         NodeEnum::OpExpr(_) => SyntaxKind::OpExpr,
    //         NodeEnum::DistinctExpr(_) => SyntaxKind::DistinctExpr,
    //         NodeEnum::NullIfExpr(_) => SyntaxKind::NullIfExpr,
    //         NodeEnum::ScalarArrayOpExpr(_) => SyntaxKind::ScalarArrayOpExpr,
    //         NodeEnum::BoolExpr(_) => SyntaxKind::BoolExpr,
    //         NodeEnum::SubLink(_) => SyntaxKind::SubLink,
    //         NodeEnum::SubPlan(_) => SyntaxKind::SubPlan,
    //         NodeEnum::AlternativeSubPlan(_) => SyntaxKind::AlternativeSubPlan,
    //         NodeEnum::FieldSelect(_) => SyntaxKind::FieldSelect,
    //         NodeEnum::FieldStore(_) => SyntaxKind::FieldStore,
    //         NodeEnum::RelabelType(_) => SyntaxKind::RelabelType,
    //         NodeEnum::CoerceViaIo(_) => SyntaxKind::CoerceViaIo,
    //         NodeEnum::ArrayCoerceExpr(_) => SyntaxKind::ArrayCoerceExpr,
    //         NodeEnum::ConvertRowtypeExpr(_) => SyntaxKind::ConvertRowtypeExpr,
    //         NodeEnum::CollateExpr(_) => SyntaxKind::CollateExpr,
    //         NodeEnum::CaseExpr(_) => SyntaxKind::CaseExpr,
    //         NodeEnum::CaseWhen(_) => SyntaxKind::CaseWhen,
    //         NodeEnum::CaseTestExpr(_) => SyntaxKind::CaseTestExpr,
    //         NodeEnum::ArrayExpr(_) => SyntaxKind::ArrayExpr,
    //         NodeEnum::RowExpr(_) => SyntaxKind::RowExpr,
    //         NodeEnum::RowCompareExpr(_) => SyntaxKind::RowCompareExpr,
    //         NodeEnum::CoalesceExpr(_) => SyntaxKind::CoalesceExpr,
    //         NodeEnum::MinMaxExpr(_) => SyntaxKind::MinMaxExpr,
    //         NodeEnum::SqlvalueFunction(_) => SyntaxKind::SqlvalueFunction,
    //         NodeEnum::XmlExpr(_) => SyntaxKind::XmlExpr,
    //         NodeEnum::NullTest(_) => SyntaxKind::NullTest,
    //         NodeEnum::BooleanTest(_) => SyntaxKind::BooleanTest,
    //         NodeEnum::CoerceToDomain(_) => SyntaxKind::CoerceToDomain,
    //         NodeEnum::CoerceToDomainValue(_) => SyntaxKind::CoerceToDomainValue,
    //         NodeEnum::SetToDefault(_) => SyntaxKind::SetToDefault,
    //         NodeEnum::CurrentOfExpr(_) => SyntaxKind::CurrentOfExpr,
    //         NodeEnum::NextValueExpr(_) => SyntaxKind::NextValueExpr,
    //         NodeEnum::InferenceElem(_) => SyntaxKind::InferenceElem,
    //         NodeEnum::TargetEntry(_) => SyntaxKind::TargetEntry,
    //         NodeEnum::RangeTblRef(_) => SyntaxKind::RangeTblRef,
    //         NodeEnum::JoinExpr(_) => SyntaxKind::JoinExpr,
    //         NodeEnum::FromExpr(_) => SyntaxKind::FromExpr,
    //         NodeEnum::OnConflictExpr(_) => SyntaxKind::OnConflictExpr,
    //         NodeEnum::IntoClause(_) => SyntaxKind::IntoClause,
    //         NodeEnum::MergeAction(_) => SyntaxKind::MergeAction,
    //         NodeEnum::RawStmt(_) => SyntaxKind::RawStmt,
    //         NodeEnum::Query(_) => SyntaxKind::Query,
    //         NodeEnum::InsertStmt(_) => SyntaxKind::InsertStmt,
    //         NodeEnum::DeleteStmt(_) => SyntaxKind::DeleteStmt,
    //         NodeEnum::UpdateStmt(_) => SyntaxKind::UpdateStmt,
    //         NodeEnum::MergeStmt(_) => SyntaxKind::MergeStmt,
    //         NodeEnum::SelectStmt(_) => SyntaxKind::SelectStmt,
    //         NodeEnum::ReturnStmt(_) => SyntaxKind::ReturnStmt,
    //         NodeEnum::PlassignStmt(_) => SyntaxKind::PlassignStmt,
    //         NodeEnum::AlterTableStmt(_) => SyntaxKind::AlterTableStmt,
    //         NodeEnum::AlterTableCmd(_) => SyntaxKind::AlterTableCmd,
    //         NodeEnum::AlterDomainStmt(_) => SyntaxKind::AlterDomainStmt,
    //         NodeEnum::SetOperationStmt(_) => SyntaxKind::SetOperationStmt,
    //         NodeEnum::GrantStmt(_) => SyntaxKind::GrantStmt,
    //         NodeEnum::GrantRoleStmt(_) => SyntaxKind::GrantRoleStmt,
    //         NodeEnum::AlterDefaultPrivilegesStmt(_) => SyntaxKind::AlterDefaultPrivilegesStmt,
    //         NodeEnum::ClosePortalStmt(_) => SyntaxKind::ClosePortalStmt,
    //         NodeEnum::ClusterStmt(_) => SyntaxKind::ClusterStmt,
    //         NodeEnum::CopyStmt(_) => SyntaxKind::CopyStmt,
    //         NodeEnum::CreateStmt(_) => SyntaxKind::CreateStmt,
    //         NodeEnum::DefineStmt(_) => SyntaxKind::DefineStmt,
    //         NodeEnum::DropStmt(_) => SyntaxKind::DropStmt,
    //         NodeEnum::TruncateStmt(_) => SyntaxKind::TruncateStmt,
    //         NodeEnum::CommentStmt(_) => SyntaxKind::CommentStmt,
    //         NodeEnum::FetchStmt(_) => SyntaxKind::FetchStmt,
    //         NodeEnum::IndexStmt(_) => SyntaxKind::IndexStmt,
    //         NodeEnum::CreateFunctionStmt(_) => SyntaxKind::CreateFunctionStmt,
    //         NodeEnum::AlterFunctionStmt(_) => SyntaxKind::AlterFunctionStmt,
    //         NodeEnum::DoStmt(_) => SyntaxKind::DoStmt,
    //         NodeEnum::RenameStmt(_) => SyntaxKind::RenameStmt,
    //         NodeEnum::RuleStmt(_) => SyntaxKind::RuleStmt,
    //         NodeEnum::NotifyStmt(_) => SyntaxKind::NotifyStmt,
    //         NodeEnum::ListenStmt(_) => SyntaxKind::ListenStmt,
    //         NodeEnum::UnlistenStmt(_) => SyntaxKind::UnlistenStmt,
    //         NodeEnum::TransactionStmt(_) => SyntaxKind::TransactionStmt,
    //         NodeEnum::ViewStmt(_) => SyntaxKind::ViewStmt,
    //         NodeEnum::LoadStmt(_) => SyntaxKind::LoadStmt,
    //         NodeEnum::CreateDomainStmt(_) => SyntaxKind::CreateDomainStmt,
    //         NodeEnum::CreatedbStmt(_) => SyntaxKind::CreatedbStmt,
    //         NodeEnum::DropdbStmt(_) => SyntaxKind::DropdbStmt,
    //         NodeEnum::VacuumStmt(_) => SyntaxKind::VacuumStmt,
    //         NodeEnum::ExplainStmt(_) => SyntaxKind::ExplainStmt,
    //         NodeEnum::CreateTableAsStmt(_) => SyntaxKind::CreateTableAsStmt,
    //         NodeEnum::CreateSeqStmt(_) => SyntaxKind::CreateSeqStmt,
    //         NodeEnum::AlterSeqStmt(_) => SyntaxKind::AlterSeqStmt,
    //         NodeEnum::VariableSetStmt(_) => SyntaxKind::VariableSetStmt,
    //         NodeEnum::VariableShowStmt(_) => SyntaxKind::VariableShowStmt,
    //         NodeEnum::DiscardStmt(_) => SyntaxKind::DiscardStmt,
    //         NodeEnum::CreateTrigStmt(_) => SyntaxKind::CreateTrigStmt,
    //         NodeEnum::CreatePlangStmt(_) => SyntaxKind::CreatePlangStmt,
    //         NodeEnum::CreateRoleStmt(_) => SyntaxKind::CreateRoleStmt,
    //         NodeEnum::AlterRoleStmt(_) => SyntaxKind::AlterRoleStmt,
    //         NodeEnum::DropRoleStmt(_) => SyntaxKind::DropRoleStmt,
    //         NodeEnum::LockStmt(_) => SyntaxKind::LockStmt,
    //         NodeEnum::ConstraintsSetStmt(_) => SyntaxKind::ConstraintsSetStmt,
    //         NodeEnum::ReindexStmt(_) => SyntaxKind::ReindexStmt,
    //         NodeEnum::CheckPointStmt(_) => SyntaxKind::CheckPointStmt,
    //         NodeEnum::CreateSchemaStmt(_) => SyntaxKind::CreateSchemaStmt,
    //         NodeEnum::AlterDatabaseStmt(_) => SyntaxKind::AlterDatabaseStmt,
    //         NodeEnum::AlterDatabaseRefreshCollStmt(_) => SyntaxKind::AlterDatabaseRefreshCollStmt,
    //         NodeEnum::AlterDatabaseSetStmt(_) => SyntaxKind::AlterDatabaseSetStmt,
    //         NodeEnum::AlterRoleSetStmt(_) => SyntaxKind::AlterRoleSetStmt,
    //         NodeEnum::CreateConversionStmt(_) => SyntaxKind::CreateConversionStmt,
    //         NodeEnum::CreateCastStmt(_) => SyntaxKind::CreateCastStmt,
    //         NodeEnum::CreateOpClassStmt(_) => SyntaxKind::CreateOpClassStmt,
    //         NodeEnum::CreateOpFamilyStmt(_) => SyntaxKind::CreateOpFamilyStmt,
    //         NodeEnum::AlterOpFamilyStmt(_) => SyntaxKind::AlterOpFamilyStmt,
    //         NodeEnum::PrepareStmt(_) => SyntaxKind::PrepareStmt,
    //         NodeEnum::ExecuteStmt(_) => SyntaxKind::ExecuteStmt,
    //         NodeEnum::DeallocateStmt(_) => SyntaxKind::DeallocateStmt,
    //         NodeEnum::DeclareCursorStmt(_) => SyntaxKind::DeclareCursorStmt,
    //         NodeEnum::CreateTableSpaceStmt(_) => SyntaxKind::CreateTableSpaceStmt,
    //         NodeEnum::DropTableSpaceStmt(_) => SyntaxKind::DropTableSpaceStmt,
    //         NodeEnum::AlterObjectDependsStmt(_) => SyntaxKind::AlterObjectDependsStmt,
    //         NodeEnum::AlterObjectSchemaStmt(_) => SyntaxKind::AlterObjectSchemaStmt,
    //         NodeEnum::AlterOwnerStmt(_) => SyntaxKind::AlterOwnerStmt,
    //         NodeEnum::AlterOperatorStmt(_) => SyntaxKind::AlterOperatorStmt,
    //         NodeEnum::AlterTypeStmt(_) => SyntaxKind::AlterTypeStmt,
    //         NodeEnum::DropOwnedStmt(_) => SyntaxKind::DropOwnedStmt,
    //         NodeEnum::ReassignOwnedStmt(_) => SyntaxKind::ReassignOwnedStmt,
    //         NodeEnum::CompositeTypeStmt(_) => SyntaxKind::CompositeTypeStmt,
    //         NodeEnum::CreateEnumStmt(_) => SyntaxKind::CreateEnumStmt,
    //         NodeEnum::CreateRangeStmt(_) => SyntaxKind::CreateRangeStmt,
    //         NodeEnum::AlterEnumStmt(_) => SyntaxKind::AlterEnumStmt,
    //         NodeEnum::AlterTsdictionaryStmt(_) => SyntaxKind::AlterTsdictionaryStmt,
    //         NodeEnum::AlterTsconfigurationStmt(_) => SyntaxKind::AlterTsconfigurationStmt,
    //         NodeEnum::CreateFdwStmt(_) => SyntaxKind::CreateFdwStmt,
    //         NodeEnum::AlterFdwStmt(_) => SyntaxKind::AlterFdwStmt,
    //         NodeEnum::CreateForeignServerStmt(_) => SyntaxKind::CreateForeignServerStmt,
    //         NodeEnum::AlterForeignServerStmt(_) => SyntaxKind::AlterForeignServerStmt,
    //         NodeEnum::CreateUserMappingStmt(_) => SyntaxKind::CreateUserMappingStmt,
    //         NodeEnum::AlterUserMappingStmt(_) => SyntaxKind::AlterUserMappingStmt,
    //         NodeEnum::DropUserMappingStmt(_) => SyntaxKind::DropUserMappingStmt,
    //         NodeEnum::AlterTableSpaceOptionsStmt(_) => SyntaxKind::AlterTableSpaceOptionsStmt,
    //         NodeEnum::AlterTableMoveAllStmt(_) => SyntaxKind::AlterTableMoveAllStmt,
    //         NodeEnum::SecLabelStmt(_) => SyntaxKind::SecLabelStmt,
    //         NodeEnum::CreateForeignTableStmt(_) => SyntaxKind::CreateForeignTableStmt,
    //         NodeEnum::ImportForeignSchemaStmt(_) => SyntaxKind::ImportForeignSchemaStmt,
    //         NodeEnum::CreateExtensionStmt(_) => SyntaxKind::CreateExtensionStmt,
    //         NodeEnum::AlterExtensionStmt(_) => SyntaxKind::AlterExtensionStmt,
    //         NodeEnum::AlterExtensionContentsStmt(_) => SyntaxKind::AlterExtensionContentsStmt,
    //         NodeEnum::CreateEventTrigStmt(_) => SyntaxKind::CreateEventTrigStmt,
    //         NodeEnum::AlterEventTrigStmt(_) => SyntaxKind::AlterEventTrigStmt,
    //         NodeEnum::RefreshMatViewStmt(_) => SyntaxKind::RefreshMatViewStmt,
    //         NodeEnum::ReplicaIdentityStmt(_) => SyntaxKind::ReplicaIdentityStmt,
    //         NodeEnum::AlterSystemStmt(_) => SyntaxKind::AlterSystemStmt,
    //         NodeEnum::CreatePolicyStmt(_) => SyntaxKind::CreatePolicyStmt,
    //         NodeEnum::AlterPolicyStmt(_) => SyntaxKind::AlterPolicyStmt,
    //         NodeEnum::CreateTransformStmt(_) => SyntaxKind::CreateTransformStmt,
    //         NodeEnum::CreateAmStmt(_) => SyntaxKind::CreateAmStmt,
    //         NodeEnum::CreatePublicationStmt(_) => SyntaxKind::CreatePublicationStmt,
    //         NodeEnum::AlterPublicationStmt(_) => SyntaxKind::AlterPublicationStmt,
    //         NodeEnum::CreateSubscriptionStmt(_) => SyntaxKind::CreateSubscriptionStmt,
    //         NodeEnum::AlterSubscriptionStmt(_) => SyntaxKind::AlterSubscriptionStmt,
    //         NodeEnum::DropSubscriptionStmt(_) => SyntaxKind::DropSubscriptionStmt,
    //         NodeEnum::CreateStatsStmt(_) => SyntaxKind::CreateStatsStmt,
    //         NodeEnum::AlterCollationStmt(_) => SyntaxKind::AlterCollationStmt,
    //         NodeEnum::CallStmt(_) => SyntaxKind::CallStmt,
    //         NodeEnum::AlterStatsStmt(_) => SyntaxKind::AlterStatsStmt,
    //         NodeEnum::AExpr(_) => SyntaxKind::AExpr,
    //         NodeEnum::ColumnRef(_) => SyntaxKind::ColumnRef,
    //         NodeEnum::ParamRef(_) => SyntaxKind::ParamRef,
    //         NodeEnum::FuncCall(_) => SyntaxKind::FuncCall,
    //         NodeEnum::AStar(_) => SyntaxKind::AStar,
    //         NodeEnum::AIndices(_) => SyntaxKind::AIndices,
    //         NodeEnum::AIndirection(_) => SyntaxKind::AIndirection,
    //         NodeEnum::AArrayExpr(_) => SyntaxKind::AArrayExpr,
    //         NodeEnum::ResTarget(_) => SyntaxKind::ResTarget,
    //         NodeEnum::MultiAssignRef(_) => SyntaxKind::MultiAssignRef,
    //         NodeEnum::TypeCast(_) => SyntaxKind::TypeCast,
    //         NodeEnum::CollateClause(_) => SyntaxKind::CollateClause,
    //         NodeEnum::SortBy(_) => SyntaxKind::SortBy,
    //         NodeEnum::WindowDef(_) => SyntaxKind::WindowDef,
    //         NodeEnum::RangeSubselect(_) => SyntaxKind::RangeSubselect,
    //         NodeEnum::RangeFunction(_) => SyntaxKind::RangeFunction,
    //         NodeEnum::RangeTableSample(_) => SyntaxKind::RangeTableSample,
    //         NodeEnum::RangeTableFunc(_) => SyntaxKind::RangeTableFunc,
    //         NodeEnum::RangeTableFuncCol(_) => SyntaxKind::RangeTableFuncCol,
    //         NodeEnum::TypeName(_) => SyntaxKind::TypeName,
    //         NodeEnum::ColumnDef(_) => SyntaxKind::ColumnDef,
    //         NodeEnum::IndexElem(_) => SyntaxKind::IndexElem,
    //         NodeEnum::StatsElem(_) => SyntaxKind::StatsElem,
    //         NodeEnum::Constraint(_) => SyntaxKind::Constraint,
    //         NodeEnum::DefElem(_) => SyntaxKind::DefElem,
    //         NodeEnum::RangeTblEntry(_) => SyntaxKind::RangeTblEntry,
    //         NodeEnum::RangeTblFunction(_) => SyntaxKind::RangeTblFunction,
    //         NodeEnum::TableSampleClause(_) => SyntaxKind::TableSampleClause,
    //         NodeEnum::WithCheckOption(_) => SyntaxKind::WithCheckOption,
    //         NodeEnum::SortGroupClause(_) => SyntaxKind::SortGroupClause,
    //         NodeEnum::GroupingSet(_) => SyntaxKind::GroupingSet,
    //         NodeEnum::WindowClause(_) => SyntaxKind::WindowClause,
    //         NodeEnum::ObjectWithArgs(_) => SyntaxKind::ObjectWithArgs,
    //         NodeEnum::AccessPriv(_) => SyntaxKind::AccessPriv,
    //         NodeEnum::CreateOpClassItem(_) => SyntaxKind::CreateOpClassItem,
    //         NodeEnum::TableLikeClause(_) => SyntaxKind::TableLikeClause,
    //         NodeEnum::FunctionParameter(_) => SyntaxKind::FunctionParameter,
    //         NodeEnum::LockingClause(_) => SyntaxKind::LockingClause,
    //         NodeEnum::RowMarkClause(_) => SyntaxKind::RowMarkClause,
    //         NodeEnum::XmlSerialize(_) => SyntaxKind::XmlSerialize,
    //         NodeEnum::WithClause(_) => SyntaxKind::WithClause,
    //         NodeEnum::InferClause(_) => SyntaxKind::InferClause,
    //         NodeEnum::OnConflictClause(_) => SyntaxKind::OnConflictClause,
    //         NodeEnum::CtesearchClause(_) => SyntaxKind::CtesearchClause,
    //         NodeEnum::CtecycleClause(_) => SyntaxKind::CtecycleClause,
    //         NodeEnum::CommonTableExpr(_) => SyntaxKind::CommonTableExpr,
    //         NodeEnum::MergeWhenClause(_) => SyntaxKind::MergeWhenClause,
    //         NodeEnum::RoleSpec(_) => SyntaxKind::RoleSpec,
    //         NodeEnum::TriggerTransition(_) => SyntaxKind::TriggerTransition,
    //         NodeEnum::PartitionElem(_) => SyntaxKind::PartitionElem,
    //         NodeEnum::PartitionSpec(_) => SyntaxKind::PartitionSpec,
    //         NodeEnum::PartitionBoundSpec(_) => SyntaxKind::PartitionBoundSpec,
    //         NodeEnum::PartitionRangeDatum(_) => SyntaxKind::PartitionRangeDatum,
    //         NodeEnum::PartitionCmd(_) => SyntaxKind::PartitionCmd,
    //         NodeEnum::VacuumRelation(_) => SyntaxKind::VacuumRelation,
    //         NodeEnum::PublicationObjSpec(_) => SyntaxKind::PublicationObjSpec,
    //         NodeEnum::PublicationTable(_) => SyntaxKind::PublicationTable,
    //         NodeEnum::InlineCodeBlock(_) => SyntaxKind::InlineCodeBlock,
    //         NodeEnum::CallContext(_) => SyntaxKind::CallContext,
    //         NodeEnum::Integer(_) => SyntaxKind::Integer,
    //         NodeEnum::Float(_) => SyntaxKind::Float,
    //         NodeEnum::Boolean(_) => SyntaxKind::Boolean,
    //         NodeEnum::String(_) => SyntaxKind::String,
    //         NodeEnum::BitString(_) => SyntaxKind::BitString,
    //         NodeEnum::List(_) => SyntaxKind::List,
    //         NodeEnum::IntList(_) => SyntaxKind::IntList,
    //         NodeEnum::OidList(_) => SyntaxKind::OidList,
    //         NodeEnum::AConst(_) => SyntaxKind::AConst,
    //     }
    // }

    // /// Converts a `pg_query` token to a `SyntaxKind`
    // pub fn new_from_pg_query_token(token: &ScanToken) -> Self {
    //     match token.token {
    //         0 => SyntaxKind::Nul,
    //         37 => SyntaxKind::Ascii37,
    //         40 => SyntaxKind::Ascii40,
    //         41 => SyntaxKind::Ascii41,
    //         42 => SyntaxKind::Ascii42,
    //         43 => SyntaxKind::Ascii43,
    //         44 => SyntaxKind::Ascii44,
    //         45 => SyntaxKind::Ascii45,
    //         46 => SyntaxKind::Ascii46,
    //         47 => SyntaxKind::Ascii47,
    //         58 => SyntaxKind::Ascii58,
    //         59 => SyntaxKind::Ascii59,
    //         60 => SyntaxKind::Ascii60,
    //         61 => SyntaxKind::Ascii61,
    //         62 => SyntaxKind::Ascii62,
    //         63 => SyntaxKind::Ascii63,
    //         91 => SyntaxKind::Ascii91,
    //         92 => SyntaxKind::Ascii92,
    //         93 => SyntaxKind::Ascii93,
    //         94 => SyntaxKind::Ascii94,
    //         258 => SyntaxKind::Ident,
    //         259 => SyntaxKind::Uident,
    //         260 => SyntaxKind::Fconst,
    //         261 => SyntaxKind::Sconst,
    //         262 => SyntaxKind::Usconst,
    //         263 => SyntaxKind::Bconst,
    //         264 => SyntaxKind::Xconst,
    //         265 => SyntaxKind::Op,
    //         266 => SyntaxKind::Iconst,
    //         267 => SyntaxKind::Param,
    //         268 => SyntaxKind::Typecast,
    //         269 => SyntaxKind::DotDot,
    //         270 => SyntaxKind::ColonEquals,
    //         271 => SyntaxKind::EqualsGreater,
    //         272 => SyntaxKind::LessEquals,
    //         273 => SyntaxKind::GreaterEquals,
    //         274 => SyntaxKind::NotEquals,
    //         275 => SyntaxKind::SqlComment,
    //         276 => SyntaxKind::CComment,
    //         277 => SyntaxKind::AbortP,
    //         278 => SyntaxKind::AbsoluteP,
    //         279 => SyntaxKind::Access,
    //         280 => SyntaxKind::Action,
    //         281 => SyntaxKind::AddP,
    //         282 => SyntaxKind::Admin,
    //         283 => SyntaxKind::After,
    //         284 => SyntaxKind::Aggregate,
    //         285 => SyntaxKind::All,
    //         286 => SyntaxKind::Also,
    //         287 => SyntaxKind::Alter,
    //         288 => SyntaxKind::Always,
    //         289 => SyntaxKind::Analyse,
    //         290 => SyntaxKind::Analyze,
    //         291 => SyntaxKind::And,
    //         292 => SyntaxKind::Any,
    //         293 => SyntaxKind::Array,
    //         294 => SyntaxKind::As,
    //         295 => SyntaxKind::Asc,
    //         296 => SyntaxKind::Asensitive,
    //         297 => SyntaxKind::Assertion,
    //         298 => SyntaxKind::Assignment,
    //         299 => SyntaxKind::Asymmetric,
    //         300 => SyntaxKind::Atomic,
    //         301 => SyntaxKind::At,
    //         302 => SyntaxKind::Attach,
    //         303 => SyntaxKind::Attribute,
    //         304 => SyntaxKind::Authorization,
    //         305 => SyntaxKind::Backward,
    //         306 => SyntaxKind::Before,
    //         307 => SyntaxKind::BeginP,
    //         308 => SyntaxKind::Between,
    //         309 => SyntaxKind::Bigint,
    //         310 => SyntaxKind::Binary,
    //         311 => SyntaxKind::Bit,
    //         312 => SyntaxKind::BooleanP,
    //         313 => SyntaxKind::Both,
    //         314 => SyntaxKind::Breadth,
    //         315 => SyntaxKind::By,
    //         316 => SyntaxKind::Cache,
    //         317 => SyntaxKind::Call,
    //         318 => SyntaxKind::Called,
    //         319 => SyntaxKind::Cascade,
    //         320 => SyntaxKind::Cascaded,
    //         321 => SyntaxKind::Case,
    //         322 => SyntaxKind::Cast,
    //         323 => SyntaxKind::CatalogP,
    //         324 => SyntaxKind::Chain,
    //         325 => SyntaxKind::CharP,
    //         326 => SyntaxKind::Character,
    //         327 => SyntaxKind::Characteristics,
    //         328 => SyntaxKind::Check,
    //         329 => SyntaxKind::Checkpoint,
    //         330 => SyntaxKind::Class,
    //         331 => SyntaxKind::Close,
    //         332 => SyntaxKind::Cluster,
    //         333 => SyntaxKind::Coalesce,
    //         334 => SyntaxKind::Collate,
    //         335 => SyntaxKind::Collation,
    //         336 => SyntaxKind::Column,
    //         337 => SyntaxKind::Columns,
    //         338 => SyntaxKind::Comment,
    //         339 => SyntaxKind::Comments,
    //         340 => SyntaxKind::Commit,
    //         341 => SyntaxKind::Committed,
    //         342 => SyntaxKind::Compression,
    //         343 => SyntaxKind::Concurrently,
    //         344 => SyntaxKind::Configuration,
    //         345 => SyntaxKind::Conflict,
    //         346 => SyntaxKind::Connection,
    //         347 => SyntaxKind::Constraint,
    //         348 => SyntaxKind::Constraints,
    //         349 => SyntaxKind::ContentP,
    //         350 => SyntaxKind::ContinueP,
    //         351 => SyntaxKind::ConversionP,
    //         352 => SyntaxKind::Copy,
    //         353 => SyntaxKind::Cost,
    //         354 => SyntaxKind::Create,
    //         355 => SyntaxKind::Cross,
    //         356 => SyntaxKind::Csv,
    //         357 => SyntaxKind::Cube,
    //         358 => SyntaxKind::CurrentP,
    //         359 => SyntaxKind::CurrentCatalog,
    //         360 => SyntaxKind::CurrentDate,
    //         361 => SyntaxKind::CurrentRole,
    //         362 => SyntaxKind::CurrentSchema,
    //         363 => SyntaxKind::CurrentTime,
    //         364 => SyntaxKind::CurrentTimestamp,
    //         365 => SyntaxKind::CurrentUser,
    //         366 => SyntaxKind::Cursor,
    //         367 => SyntaxKind::Cycle,
    //         368 => SyntaxKind::DataP,
    //         369 => SyntaxKind::Database,
    //         370 => SyntaxKind::DayP,
    //         371 => SyntaxKind::Deallocate,
    //         372 => SyntaxKind::Dec,
    //         373 => SyntaxKind::DecimalP,
    //         374 => SyntaxKind::Declare,
    //         375 => SyntaxKind::Default,
    //         376 => SyntaxKind::Defaults,
    //         377 => SyntaxKind::Deferrable,
    //         378 => SyntaxKind::Deferred,
    //         379 => SyntaxKind::Definer,
    //         380 => SyntaxKind::DeleteP,
    //         381 => SyntaxKind::Delimiter,
    //         382 => SyntaxKind::Delimiters,
    //         383 => SyntaxKind::Depends,
    //         384 => SyntaxKind::Depth,
    //         385 => SyntaxKind::Desc,
    //         386 => SyntaxKind::Detach,
    //         387 => SyntaxKind::Dictionary,
    //         388 => SyntaxKind::DisableP,
    //         389 => SyntaxKind::Discard,
    //         390 => SyntaxKind::Distinct,
    //         391 => SyntaxKind::Do,
    //         392 => SyntaxKind::DocumentP,
    //         393 => SyntaxKind::DomainP,
    //         394 => SyntaxKind::DoubleP,
    //         395 => SyntaxKind::Drop,
    //         396 => SyntaxKind::Each,
    //         397 => SyntaxKind::Else,
    //         398 => SyntaxKind::EnableP,
    //         399 => SyntaxKind::Encoding,
    //         400 => SyntaxKind::Encrypted,
    //         401 => SyntaxKind::EndP,
    //         402 => SyntaxKind::EnumP,
    //         403 => SyntaxKind::Escape,
    //         404 => SyntaxKind::Event,
    //         405 => SyntaxKind::Except,
    //         406 => SyntaxKind::Exclude,
    //         407 => SyntaxKind::Excluding,
    //         408 => SyntaxKind::Exclusive,
    //         409 => SyntaxKind::Execute,
    //         410 => SyntaxKind::Exists,
    //         411 => SyntaxKind::Explain,
    //         412 => SyntaxKind::Expression,
    //         413 => SyntaxKind::Extension,
    //         414 => SyntaxKind::External,
    //         415 => SyntaxKind::Extract,
    //         416 => SyntaxKind::FalseP,
    //         417 => SyntaxKind::Family,
    //         418 => SyntaxKind::Fetch,
    //         419 => SyntaxKind::Filter,
    //         420 => SyntaxKind::Finalize,
    //         421 => SyntaxKind::FirstP,
    //         422 => SyntaxKind::FloatP,
    //         423 => SyntaxKind::Following,
    //         424 => SyntaxKind::For,
    //         425 => SyntaxKind::Force,
    //         426 => SyntaxKind::Foreign,
    //         427 => SyntaxKind::Forward,
    //         428 => SyntaxKind::Freeze,
    //         429 => SyntaxKind::From,
    //         430 => SyntaxKind::Full,
    //         431 => SyntaxKind::Function,
    //         432 => SyntaxKind::Functions,
    //         433 => SyntaxKind::Generated,
    //         434 => SyntaxKind::Global,
    //         435 => SyntaxKind::Grant,
    //         436 => SyntaxKind::Granted,
    //         437 => SyntaxKind::Greatest,
    //         438 => SyntaxKind::GroupP,
    //         439 => SyntaxKind::Grouping,
    //         440 => SyntaxKind::Groups,
    //         441 => SyntaxKind::Handler,
    //         442 => SyntaxKind::Having,
    //         443 => SyntaxKind::HeaderP,
    //         444 => SyntaxKind::Hold,
    //         445 => SyntaxKind::HourP,
    //         446 => SyntaxKind::IdentityP,
    //         447 => SyntaxKind::IfP,
    //         448 => SyntaxKind::Ilike,
    //         449 => SyntaxKind::Immediate,
    //         450 => SyntaxKind::Immutable,
    //         451 => SyntaxKind::ImplicitP,
    //         452 => SyntaxKind::ImportP,
    //         453 => SyntaxKind::InP,
    //         454 => SyntaxKind::Include,
    //         455 => SyntaxKind::Including,
    //         456 => SyntaxKind::Increment,
    //         457 => SyntaxKind::Index,
    //         458 => SyntaxKind::Indexes,
    //         459 => SyntaxKind::Inherit,
    //         460 => SyntaxKind::Inherits,
    //         461 => SyntaxKind::Initially,
    //         462 => SyntaxKind::InlineP,
    //         463 => SyntaxKind::InnerP,
    //         464 => SyntaxKind::Inout,
    //         465 => SyntaxKind::InputP,
    //         466 => SyntaxKind::Insensitive,
    //         467 => SyntaxKind::Insert,
    //         468 => SyntaxKind::Instead,
    //         469 => SyntaxKind::IntP,
    //         470 => SyntaxKind::Integer,
    //         471 => SyntaxKind::Intersect,
    //         472 => SyntaxKind::Interval,
    //         473 => SyntaxKind::Into,
    //         474 => SyntaxKind::Invoker,
    //         475 => SyntaxKind::Is,
    //         476 => SyntaxKind::Isnull,
    //         477 => SyntaxKind::Isolation,
    //         478 => SyntaxKind::Join,
    //         479 => SyntaxKind::Key,
    //         480 => SyntaxKind::Label,
    //         481 => SyntaxKind::Language,
    //         482 => SyntaxKind::LargeP,
    //         483 => SyntaxKind::LastP,
    //         484 => SyntaxKind::LateralP,
    //         485 => SyntaxKind::Leading,
    //         486 => SyntaxKind::Leakproof,
    //         487 => SyntaxKind::Least,
    //         488 => SyntaxKind::Left,
    //         489 => SyntaxKind::Level,
    //         490 => SyntaxKind::Like,
    //         491 => SyntaxKind::Limit,
    //         492 => SyntaxKind::Listen,
    //         493 => SyntaxKind::Load,
    //         494 => SyntaxKind::Local,
    //         495 => SyntaxKind::Localtime,
    //         496 => SyntaxKind::Localtimestamp,
    //         497 => SyntaxKind::Location,
    //         498 => SyntaxKind::LockP,
    //         499 => SyntaxKind::Locked,
    //         500 => SyntaxKind::Logged,
    //         501 => SyntaxKind::Mapping,
    //         502 => SyntaxKind::Match,
    //         503 => SyntaxKind::Matched,
    //         504 => SyntaxKind::Materialized,
    //         505 => SyntaxKind::Maxvalue,
    //         506 => SyntaxKind::Merge,
    //         507 => SyntaxKind::Method,
    //         508 => SyntaxKind::MinuteP,
    //         509 => SyntaxKind::Minvalue,
    //         510 => SyntaxKind::Mode,
    //         511 => SyntaxKind::MonthP,
    //         512 => SyntaxKind::Move,
    //         513 => SyntaxKind::NameP,
    //         514 => SyntaxKind::Names,
    //         515 => SyntaxKind::National,
    //         516 => SyntaxKind::Natural,
    //         517 => SyntaxKind::Nchar,
    //         518 => SyntaxKind::New,
    //         519 => SyntaxKind::Next,
    //         520 => SyntaxKind::Nfc,
    //         521 => SyntaxKind::Nfd,
    //         522 => SyntaxKind::Nfkc,
    //         523 => SyntaxKind::Nfkd,
    //         524 => SyntaxKind::No,
    //         525 => SyntaxKind::None,
    //         526 => SyntaxKind::Normalize,
    //         527 => SyntaxKind::Normalized,
    //         528 => SyntaxKind::Not,
    //         529 => SyntaxKind::Nothing,
    //         530 => SyntaxKind::Notify,
    //         531 => SyntaxKind::Notnull,
    //         532 => SyntaxKind::Nowait,
    //         533 => SyntaxKind::NullP,
    //         534 => SyntaxKind::Nullif,
    //         535 => SyntaxKind::NullsP,
    //         536 => SyntaxKind::Numeric,
    //         537 => SyntaxKind::ObjectP,
    //         538 => SyntaxKind::Of,
    //         539 => SyntaxKind::Off,
    //         540 => SyntaxKind::Offset,
    //         541 => SyntaxKind::Oids,
    //         542 => SyntaxKind::Old,
    //         543 => SyntaxKind::On,
    //         544 => SyntaxKind::Only,
    //         545 => SyntaxKind::Operator,
    //         546 => SyntaxKind::Option,
    //         547 => SyntaxKind::Options,
    //         548 => SyntaxKind::Or,
    //         549 => SyntaxKind::Order,
    //         550 => SyntaxKind::Ordinality,
    //         551 => SyntaxKind::Others,
    //         552 => SyntaxKind::OutP,
    //         553 => SyntaxKind::OuterP,
    //         554 => SyntaxKind::Over,
    //         555 => SyntaxKind::Overlaps,
    //         556 => SyntaxKind::Overlay,
    //         557 => SyntaxKind::Overriding,
    //         558 => SyntaxKind::Owned,
    //         559 => SyntaxKind::Owner,
    //         560 => SyntaxKind::Parallel,
    //         561 => SyntaxKind::Parameter,
    //         562 => SyntaxKind::Parser,
    //         563 => SyntaxKind::Partial,
    //         564 => SyntaxKind::Partition,
    //         565 => SyntaxKind::Passing,
    //         566 => SyntaxKind::Password,
    //         567 => SyntaxKind::Placing,
    //         568 => SyntaxKind::Plans,
    //         569 => SyntaxKind::Policy,
    //         570 => SyntaxKind::Position,
    //         571 => SyntaxKind::Preceding,
    //         572 => SyntaxKind::Precision,
    //         573 => SyntaxKind::Preserve,
    //         574 => SyntaxKind::Prepare,
    //         575 => SyntaxKind::Prepared,
    //         576 => SyntaxKind::Primary,
    //         577 => SyntaxKind::Prior,
    //         578 => SyntaxKind::Privileges,
    //         579 => SyntaxKind::Procedural,
    //         580 => SyntaxKind::Procedure,
    //         581 => SyntaxKind::Procedures,
    //         582 => SyntaxKind::Program,
    //         583 => SyntaxKind::Publication,
    //         584 => SyntaxKind::Quote,
    //         585 => SyntaxKind::Range,
    //         586 => SyntaxKind::Read,
    //         587 => SyntaxKind::Real,
    //         588 => SyntaxKind::Reassign,
    //         589 => SyntaxKind::Recheck,
    //         590 => SyntaxKind::Recursive,
    //         591 => SyntaxKind::RefP,
    //         592 => SyntaxKind::References,
    //         593 => SyntaxKind::Referencing,
    //         594 => SyntaxKind::Refresh,
    //         595 => SyntaxKind::Reindex,
    //         596 => SyntaxKind::RelativeP,
    //         597 => SyntaxKind::Release,
    //         598 => SyntaxKind::Rename,
    //         599 => SyntaxKind::Repeatable,
    //         600 => SyntaxKind::Replace,
    //         601 => SyntaxKind::Replica,
    //         602 => SyntaxKind::Reset,
    //         603 => SyntaxKind::Restart,
    //         604 => SyntaxKind::Restrict,
    //         605 => SyntaxKind::Return,
    //         606 => SyntaxKind::Returning,
    //         607 => SyntaxKind::Returns,
    //         608 => SyntaxKind::Revoke,
    //         609 => SyntaxKind::Right,
    //         610 => SyntaxKind::Role,
    //         611 => SyntaxKind::Rollback,
    //         612 => SyntaxKind::Rollup,
    //         613 => SyntaxKind::Routine,
    //         614 => SyntaxKind::Routines,
    //         615 => SyntaxKind::Row,
    //         616 => SyntaxKind::Rows,
    //         617 => SyntaxKind::Rule,
    //         618 => SyntaxKind::Savepoint,
    //         619 => SyntaxKind::Schema,
    //         620 => SyntaxKind::Schemas,
    //         621 => SyntaxKind::Scroll,
    //         622 => SyntaxKind::Search,
    //         623 => SyntaxKind::SecondP,
    //         624 => SyntaxKind::Security,
    //         625 => SyntaxKind::Select,
    //         626 => SyntaxKind::Sequence,
    //         627 => SyntaxKind::Sequences,
    //         628 => SyntaxKind::Serializable,
    //         629 => SyntaxKind::Server,
    //         630 => SyntaxKind::Session,
    //         631 => SyntaxKind::SessionUser,
    //         632 => SyntaxKind::Set,
    //         633 => SyntaxKind::Sets,
    //         634 => SyntaxKind::Setof,
    //         635 => SyntaxKind::Share,
    //         636 => SyntaxKind::Show,
    //         637 => SyntaxKind::Similar,
    //         638 => SyntaxKind::Simple,
    //         639 => SyntaxKind::Skip,
    //         640 => SyntaxKind::Smallint,
    //         641 => SyntaxKind::Snapshot,
    //         642 => SyntaxKind::Some,
    //         643 => SyntaxKind::SqlP,
    //         644 => SyntaxKind::Stable,
    //         645 => SyntaxKind::StandaloneP,
    //         646 => SyntaxKind::Start,
    //         647 => SyntaxKind::Statement,
    //         648 => SyntaxKind::Statistics,
    //         649 => SyntaxKind::Stdin,
    //         650 => SyntaxKind::Stdout,
    //         651 => SyntaxKind::Storage,
    //         652 => SyntaxKind::Stored,
    //         653 => SyntaxKind::StrictP,
    //         654 => SyntaxKind::StripP,
    //         655 => SyntaxKind::Subscription,
    //         656 => SyntaxKind::Substring,
    //         657 => SyntaxKind::Support,
    //         658 => SyntaxKind::Symmetric,
    //         659 => SyntaxKind::Sysid,
    //         660 => SyntaxKind::SystemP,
    //         661 => SyntaxKind::Table,
    //         662 => SyntaxKind::Tables,
    //         663 => SyntaxKind::Tablesample,
    //         664 => SyntaxKind::Tablespace,
    //         665 => SyntaxKind::Temp,
    //         666 => SyntaxKind::Template,
    //         667 => SyntaxKind::Temporary,
    //         668 => SyntaxKind::TextP,
    //         669 => SyntaxKind::Then,
    //         670 => SyntaxKind::Ties,
    //         671 => SyntaxKind::Time,
    //         672 => SyntaxKind::Timestamp,
    //         673 => SyntaxKind::To,
    //         674 => SyntaxKind::Trailing,
    //         675 => SyntaxKind::Transaction,
    //         676 => SyntaxKind::Transform,
    //         677 => SyntaxKind::Treat,
    //         678 => SyntaxKind::Trigger,
    //         679 => SyntaxKind::Trim,
    //         680 => SyntaxKind::TrueP,
    //         681 => SyntaxKind::Truncate,
    //         682 => SyntaxKind::Trusted,
    //         683 => SyntaxKind::TypeP,
    //         684 => SyntaxKind::TypesP,
    //         685 => SyntaxKind::Uescape,
    //         686 => SyntaxKind::Unbounded,
    //         687 => SyntaxKind::Uncommitted,
    //         688 => SyntaxKind::Unencrypted,
    //         689 => SyntaxKind::Union,
    //         690 => SyntaxKind::Unique,
    //         691 => SyntaxKind::Unknown,
    //         692 => SyntaxKind::Unlisten,
    //         693 => SyntaxKind::Unlogged,
    //         694 => SyntaxKind::Until,
    //         695 => SyntaxKind::Update,
    //         696 => SyntaxKind::User,
    //         697 => SyntaxKind::Using,
    //         698 => SyntaxKind::Vacuum,
    //         699 => SyntaxKind::Valid,
    //         700 => SyntaxKind::Validate,
    //         701 => SyntaxKind::Validator,
    //         702 => SyntaxKind::ValueP,
    //         703 => SyntaxKind::Values,
    //         704 => SyntaxKind::Varchar,
    //         705 => SyntaxKind::Variadic,
    //         706 => SyntaxKind::Varying,
    //         707 => SyntaxKind::Verbose,
    //         708 => SyntaxKind::VersionP,
    //         709 => SyntaxKind::View,
    //         710 => SyntaxKind::Views,
    //         711 => SyntaxKind::Volatile,
    //         712 => SyntaxKind::When,
    //         713 => SyntaxKind::Where,
    //         714 => SyntaxKind::WhitespaceP,
    //         715 => SyntaxKind::Window,
    //         716 => SyntaxKind::With,
    //         717 => SyntaxKind::Within,
    //         718 => SyntaxKind::Without,
    //         719 => SyntaxKind::Work,
    //         720 => SyntaxKind::Wrapper,
    //         721 => SyntaxKind::Write,
    //         722 => SyntaxKind::XmlP,
    //         723 => SyntaxKind::Xmlattributes,
    //         724 => SyntaxKind::Xmlconcat,
    //         725 => SyntaxKind::Xmlelement,
    //         726 => SyntaxKind::Xmlexists,
    //         727 => SyntaxKind::Xmlforest,
    //         728 => SyntaxKind::Xmlnamespaces,
    //         729 => SyntaxKind::Xmlparse,
    //         730 => SyntaxKind::Xmlpi,
    //         731 => SyntaxKind::Xmlroot,
    //         732 => SyntaxKind::Xmlserialize,
    //         733 => SyntaxKind::Xmltable,
    //         734 => SyntaxKind::YearP,
    //         735 => SyntaxKind::YesP,
    //         736 => SyntaxKind::Zone,
    //         737 => SyntaxKind::NotLa,
    //         738 => SyntaxKind::NullsLa,
    //         739 => SyntaxKind::WithLa,
    //         740 => SyntaxKind::ModeTypeName,
    //         741 => SyntaxKind::ModePlpgsqlExpr,
    //         742 => SyntaxKind::ModePlpgsqlAssign1,
    //         743 => SyntaxKind::ModePlpgsqlAssign2,
    //         744 => SyntaxKind::ModePlpgsqlAssign3,
    //         745 => SyntaxKind::Uminus,
    //         _ => panic!("Unknown token"),
    //     }
    // }

    /// Returns the `SyntaxKindType` of a `SyntaxKind`
    pub fn get_type(&self) -> Option<SyntaxKindType> {
        match self {
            SyntaxKind::Nul => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii37 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii40 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii41 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii42 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii43 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii44 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii45 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii46 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii47 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii58 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii59 => Some(SyntaxKindType::Close),
            SyntaxKind::Ascii60 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii61 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii62 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii63 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii91 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii92 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii93 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ascii94 => Some(SyntaxKindType::Follow),
            SyntaxKind::Ident => Some(SyntaxKindType::Follow),
            SyntaxKind::Uident => Some(SyntaxKindType::Follow),
            SyntaxKind::Fconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Sconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Usconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Bconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Xconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Op => Some(SyntaxKindType::Follow),
            SyntaxKind::Iconst => Some(SyntaxKindType::Follow),
            SyntaxKind::Param => Some(SyntaxKindType::Follow),
            SyntaxKind::Typecast => Some(SyntaxKindType::Follow),
            SyntaxKind::DotDot => Some(SyntaxKindType::Follow),
            SyntaxKind::ColonEquals => Some(SyntaxKindType::Follow),
            SyntaxKind::EqualsGreater => Some(SyntaxKindType::Follow),
            SyntaxKind::LessEquals => Some(SyntaxKindType::Follow),
            SyntaxKind::GreaterEquals => Some(SyntaxKindType::Follow),
            SyntaxKind::NotEquals => Some(SyntaxKindType::Follow),
            SyntaxKind::SqlComment => Some(SyntaxKindType::Follow),
            SyntaxKind::CComment => Some(SyntaxKindType::Follow),
            SyntaxKind::AbortP => Some(SyntaxKindType::Follow),
            SyntaxKind::AbsoluteP => Some(SyntaxKindType::Follow),
            SyntaxKind::Access => Some(SyntaxKindType::Follow),
            SyntaxKind::Action => Some(SyntaxKindType::Follow),
            SyntaxKind::AddP => Some(SyntaxKindType::Follow),
            SyntaxKind::Admin => Some(SyntaxKindType::Follow),
            SyntaxKind::After => Some(SyntaxKindType::Follow),
            SyntaxKind::Aggregate => Some(SyntaxKindType::Follow),
            SyntaxKind::All => Some(SyntaxKindType::Follow),
            SyntaxKind::Also => Some(SyntaxKindType::Follow),
            SyntaxKind::Alter => Some(SyntaxKindType::Follow),
            SyntaxKind::Always => Some(SyntaxKindType::Follow),
            SyntaxKind::Analyse => Some(SyntaxKindType::Follow),
            SyntaxKind::Analyze => Some(SyntaxKindType::Follow),
            SyntaxKind::And => Some(SyntaxKindType::Follow),
            SyntaxKind::Any => Some(SyntaxKindType::Follow),
            SyntaxKind::Array => Some(SyntaxKindType::Follow),
            SyntaxKind::As => Some(SyntaxKindType::Follow),
            SyntaxKind::Asc => Some(SyntaxKindType::Follow),
            SyntaxKind::Asensitive => Some(SyntaxKindType::Follow),
            SyntaxKind::Assertion => Some(SyntaxKindType::Follow),
            SyntaxKind::Assignment => Some(SyntaxKindType::Follow),
            SyntaxKind::Asymmetric => Some(SyntaxKindType::Follow),
            SyntaxKind::Atomic => Some(SyntaxKindType::Follow),
            SyntaxKind::At => Some(SyntaxKindType::Follow),
            SyntaxKind::Attach => Some(SyntaxKindType::Follow),
            SyntaxKind::Attribute => Some(SyntaxKindType::Follow),
            SyntaxKind::Authorization => Some(SyntaxKindType::Follow),
            SyntaxKind::Backward => Some(SyntaxKindType::Follow),
            SyntaxKind::Before => Some(SyntaxKindType::Follow),
            SyntaxKind::BeginP => Some(SyntaxKindType::Follow),
            SyntaxKind::Between => Some(SyntaxKindType::Follow),
            SyntaxKind::Bigint => Some(SyntaxKindType::Follow),
            SyntaxKind::Binary => Some(SyntaxKindType::Follow),
            SyntaxKind::Bit => Some(SyntaxKindType::Follow),
            SyntaxKind::BooleanP => Some(SyntaxKindType::Follow),
            SyntaxKind::Both => Some(SyntaxKindType::Follow),
            SyntaxKind::Breadth => Some(SyntaxKindType::Follow),
            SyntaxKind::By => Some(SyntaxKindType::Follow),
            SyntaxKind::Cache => Some(SyntaxKindType::Follow),
            SyntaxKind::Call => Some(SyntaxKindType::Follow),
            SyntaxKind::Called => Some(SyntaxKindType::Follow),
            SyntaxKind::Cascade => Some(SyntaxKindType::Follow),
            SyntaxKind::Cascaded => Some(SyntaxKindType::Follow),
            SyntaxKind::Case => Some(SyntaxKindType::Follow),
            SyntaxKind::Cast => Some(SyntaxKindType::Follow),
            SyntaxKind::CatalogP => Some(SyntaxKindType::Follow),
            SyntaxKind::Chain => Some(SyntaxKindType::Follow),
            SyntaxKind::CharP => Some(SyntaxKindType::Follow),
            SyntaxKind::Character => Some(SyntaxKindType::Follow),
            SyntaxKind::Characteristics => Some(SyntaxKindType::Follow),
            SyntaxKind::Check => Some(SyntaxKindType::Follow),
            SyntaxKind::Checkpoint => Some(SyntaxKindType::Follow),
            SyntaxKind::Class => Some(SyntaxKindType::Follow),
            SyntaxKind::Close => Some(SyntaxKindType::Follow),
            SyntaxKind::Cluster => Some(SyntaxKindType::Follow),
            SyntaxKind::Coalesce => Some(SyntaxKindType::Follow),
            SyntaxKind::Collate => Some(SyntaxKindType::Follow),
            SyntaxKind::Collation => Some(SyntaxKindType::Follow),
            SyntaxKind::Column => Some(SyntaxKindType::Follow),
            SyntaxKind::Columns => Some(SyntaxKindType::Follow),
            SyntaxKind::Comment => Some(SyntaxKindType::Follow),
            SyntaxKind::Comments => Some(SyntaxKindType::Follow),
            SyntaxKind::Commit => Some(SyntaxKindType::Follow),
            SyntaxKind::Committed => Some(SyntaxKindType::Follow),
            SyntaxKind::Compression => Some(SyntaxKindType::Follow),
            SyntaxKind::Concurrently => Some(SyntaxKindType::Follow),
            SyntaxKind::Configuration => Some(SyntaxKindType::Follow),
            SyntaxKind::Conflict => Some(SyntaxKindType::Follow),
            SyntaxKind::Connection => Some(SyntaxKindType::Follow),
            SyntaxKind::Constraint => Some(SyntaxKindType::Follow),
            SyntaxKind::Constraints => Some(SyntaxKindType::Follow),
            SyntaxKind::ContentP => Some(SyntaxKindType::Follow),
            SyntaxKind::ContinueP => Some(SyntaxKindType::Follow),
            SyntaxKind::ConversionP => Some(SyntaxKindType::Follow),
            SyntaxKind::Copy => Some(SyntaxKindType::Follow),
            SyntaxKind::Cost => Some(SyntaxKindType::Follow),
            SyntaxKind::Create => Some(SyntaxKindType::Follow),
            SyntaxKind::Cross => Some(SyntaxKindType::Follow),
            SyntaxKind::Csv => Some(SyntaxKindType::Follow),
            SyntaxKind::Cube => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentP => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentCatalog => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentDate => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentRole => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentSchema => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentTime => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentTimestamp => Some(SyntaxKindType::Follow),
            SyntaxKind::CurrentUser => Some(SyntaxKindType::Follow),
            SyntaxKind::Cursor => Some(SyntaxKindType::Follow),
            SyntaxKind::Cycle => Some(SyntaxKindType::Follow),
            SyntaxKind::DataP => Some(SyntaxKindType::Follow),
            SyntaxKind::Database => Some(SyntaxKindType::Follow),
            SyntaxKind::DayP => Some(SyntaxKindType::Follow),
            SyntaxKind::Deallocate => Some(SyntaxKindType::Follow),
            SyntaxKind::Dec => Some(SyntaxKindType::Follow),
            SyntaxKind::DecimalP => Some(SyntaxKindType::Follow),
            SyntaxKind::Declare => Some(SyntaxKindType::Follow),
            SyntaxKind::Default => Some(SyntaxKindType::Follow),
            SyntaxKind::Defaults => Some(SyntaxKindType::Follow),
            SyntaxKind::Deferrable => Some(SyntaxKindType::Follow),
            SyntaxKind::Deferred => Some(SyntaxKindType::Follow),
            SyntaxKind::Definer => Some(SyntaxKindType::Follow),
            SyntaxKind::DeleteP => Some(SyntaxKindType::Follow),
            SyntaxKind::Delimiter => Some(SyntaxKindType::Follow),
            SyntaxKind::Delimiters => Some(SyntaxKindType::Follow),
            SyntaxKind::Depends => Some(SyntaxKindType::Follow),
            SyntaxKind::Depth => Some(SyntaxKindType::Follow),
            SyntaxKind::Desc => Some(SyntaxKindType::Follow),
            SyntaxKind::Detach => Some(SyntaxKindType::Follow),
            SyntaxKind::Dictionary => Some(SyntaxKindType::Follow),
            SyntaxKind::DisableP => Some(SyntaxKindType::Follow),
            SyntaxKind::Discard => Some(SyntaxKindType::Follow),
            SyntaxKind::Distinct => Some(SyntaxKindType::Follow),
            SyntaxKind::Do => Some(SyntaxKindType::Follow),
            SyntaxKind::DocumentP => Some(SyntaxKindType::Follow),
            SyntaxKind::DomainP => Some(SyntaxKindType::Follow),
            SyntaxKind::DoubleP => Some(SyntaxKindType::Follow),
            SyntaxKind::Drop => Some(SyntaxKindType::Follow),
            SyntaxKind::Each => Some(SyntaxKindType::Follow),
            SyntaxKind::Else => Some(SyntaxKindType::Follow),
            SyntaxKind::EnableP => Some(SyntaxKindType::Follow),
            SyntaxKind::Encoding => Some(SyntaxKindType::Follow),
            SyntaxKind::Encrypted => Some(SyntaxKindType::Follow),
            SyntaxKind::EndP => Some(SyntaxKindType::Follow),
            SyntaxKind::EnumP => Some(SyntaxKindType::Follow),
            SyntaxKind::Escape => Some(SyntaxKindType::Follow),
            SyntaxKind::Event => Some(SyntaxKindType::Follow),
            SyntaxKind::Except => Some(SyntaxKindType::Follow),
            SyntaxKind::Exclude => Some(SyntaxKindType::Follow),
            SyntaxKind::Excluding => Some(SyntaxKindType::Follow),
            SyntaxKind::Exclusive => Some(SyntaxKindType::Follow),
            SyntaxKind::Execute => Some(SyntaxKindType::Follow),
            SyntaxKind::Exists => Some(SyntaxKindType::Follow),
            SyntaxKind::Explain => Some(SyntaxKindType::Follow),
            SyntaxKind::Expression => Some(SyntaxKindType::Follow),
            SyntaxKind::Extension => Some(SyntaxKindType::Follow),
            SyntaxKind::External => Some(SyntaxKindType::Follow),
            SyntaxKind::Extract => Some(SyntaxKindType::Follow),
            SyntaxKind::FalseP => Some(SyntaxKindType::Follow),
            SyntaxKind::Family => Some(SyntaxKindType::Follow),
            SyntaxKind::Fetch => Some(SyntaxKindType::Follow),
            SyntaxKind::Filter => Some(SyntaxKindType::Follow),
            SyntaxKind::Finalize => Some(SyntaxKindType::Follow),
            SyntaxKind::FirstP => Some(SyntaxKindType::Follow),
            SyntaxKind::FloatP => Some(SyntaxKindType::Follow),
            SyntaxKind::Following => Some(SyntaxKindType::Follow),
            SyntaxKind::For => Some(SyntaxKindType::Follow),
            SyntaxKind::Force => Some(SyntaxKindType::Follow),
            SyntaxKind::Foreign => Some(SyntaxKindType::Follow),
            SyntaxKind::Forward => Some(SyntaxKindType::Follow),
            SyntaxKind::Freeze => Some(SyntaxKindType::Follow),
            SyntaxKind::From => Some(SyntaxKindType::Follow),
            SyntaxKind::Full => Some(SyntaxKindType::Follow),
            SyntaxKind::Function => Some(SyntaxKindType::Follow),
            SyntaxKind::Functions => Some(SyntaxKindType::Follow),
            SyntaxKind::Generated => Some(SyntaxKindType::Follow),
            SyntaxKind::Global => Some(SyntaxKindType::Follow),
            SyntaxKind::Grant => Some(SyntaxKindType::Follow),
            SyntaxKind::Granted => Some(SyntaxKindType::Follow),
            SyntaxKind::Greatest => Some(SyntaxKindType::Follow),
            SyntaxKind::GroupP => Some(SyntaxKindType::Follow),
            SyntaxKind::Grouping => Some(SyntaxKindType::Follow),
            SyntaxKind::Groups => Some(SyntaxKindType::Follow),
            SyntaxKind::Handler => Some(SyntaxKindType::Follow),
            SyntaxKind::Having => Some(SyntaxKindType::Follow),
            SyntaxKind::HeaderP => Some(SyntaxKindType::Follow),
            SyntaxKind::Hold => Some(SyntaxKindType::Follow),
            SyntaxKind::HourP => Some(SyntaxKindType::Follow),
            SyntaxKind::IdentityP => Some(SyntaxKindType::Follow),
            SyntaxKind::IfP => Some(SyntaxKindType::Follow),
            SyntaxKind::Ilike => Some(SyntaxKindType::Follow),
            SyntaxKind::Immediate => Some(SyntaxKindType::Follow),
            SyntaxKind::Immutable => Some(SyntaxKindType::Follow),
            SyntaxKind::ImplicitP => Some(SyntaxKindType::Follow),
            SyntaxKind::ImportP => Some(SyntaxKindType::Follow),
            SyntaxKind::InP => Some(SyntaxKindType::Follow),
            SyntaxKind::Include => Some(SyntaxKindType::Follow),
            SyntaxKind::Including => Some(SyntaxKindType::Follow),
            SyntaxKind::Increment => Some(SyntaxKindType::Follow),
            SyntaxKind::Index => Some(SyntaxKindType::Follow),
            SyntaxKind::Indexes => Some(SyntaxKindType::Follow),
            SyntaxKind::Inherit => Some(SyntaxKindType::Follow),
            SyntaxKind::Inherits => Some(SyntaxKindType::Follow),
            SyntaxKind::Initially => Some(SyntaxKindType::Follow),
            SyntaxKind::InlineP => Some(SyntaxKindType::Follow),
            SyntaxKind::InnerP => Some(SyntaxKindType::Follow),
            SyntaxKind::Inout => Some(SyntaxKindType::Follow),
            SyntaxKind::InputP => Some(SyntaxKindType::Follow),
            SyntaxKind::Insensitive => Some(SyntaxKindType::Follow),
            SyntaxKind::Insert => Some(SyntaxKindType::Follow),
            SyntaxKind::Instead => Some(SyntaxKindType::Follow),
            SyntaxKind::IntP => Some(SyntaxKindType::Follow),
            SyntaxKind::Integer => Some(SyntaxKindType::Follow),
            SyntaxKind::Intersect => Some(SyntaxKindType::Follow),
            SyntaxKind::Interval => Some(SyntaxKindType::Follow),
            SyntaxKind::Into => Some(SyntaxKindType::Follow),
            SyntaxKind::Invoker => Some(SyntaxKindType::Follow),
            SyntaxKind::Is => Some(SyntaxKindType::Follow),
            SyntaxKind::Isnull => Some(SyntaxKindType::Follow),
            SyntaxKind::Isolation => Some(SyntaxKindType::Follow),
            SyntaxKind::Join => Some(SyntaxKindType::Follow),
            SyntaxKind::Key => Some(SyntaxKindType::Follow),
            SyntaxKind::Label => Some(SyntaxKindType::Follow),
            SyntaxKind::Language => Some(SyntaxKindType::Follow),
            SyntaxKind::LargeP => Some(SyntaxKindType::Follow),
            SyntaxKind::LastP => Some(SyntaxKindType::Follow),
            SyntaxKind::LateralP => Some(SyntaxKindType::Follow),
            SyntaxKind::Leading => Some(SyntaxKindType::Follow),
            SyntaxKind::Leakproof => Some(SyntaxKindType::Follow),
            SyntaxKind::Least => Some(SyntaxKindType::Follow),
            SyntaxKind::Left => Some(SyntaxKindType::Follow),
            SyntaxKind::Level => Some(SyntaxKindType::Follow),
            SyntaxKind::Like => Some(SyntaxKindType::Follow),
            SyntaxKind::Limit => Some(SyntaxKindType::Follow),
            SyntaxKind::Listen => Some(SyntaxKindType::Follow),
            SyntaxKind::Load => Some(SyntaxKindType::Follow),
            SyntaxKind::Local => Some(SyntaxKindType::Follow),
            SyntaxKind::Localtime => Some(SyntaxKindType::Follow),
            SyntaxKind::Localtimestamp => Some(SyntaxKindType::Follow),
            SyntaxKind::Location => Some(SyntaxKindType::Follow),
            SyntaxKind::LockP => Some(SyntaxKindType::Follow),
            SyntaxKind::Locked => Some(SyntaxKindType::Follow),
            SyntaxKind::Logged => Some(SyntaxKindType::Follow),
            SyntaxKind::Mapping => Some(SyntaxKindType::Follow),
            SyntaxKind::Match => Some(SyntaxKindType::Follow),
            SyntaxKind::Matched => Some(SyntaxKindType::Follow),
            SyntaxKind::Materialized => Some(SyntaxKindType::Follow),
            SyntaxKind::Maxvalue => Some(SyntaxKindType::Follow),
            SyntaxKind::Merge => Some(SyntaxKindType::Follow),
            SyntaxKind::Method => Some(SyntaxKindType::Follow),
            SyntaxKind::MinuteP => Some(SyntaxKindType::Follow),
            SyntaxKind::Minvalue => Some(SyntaxKindType::Follow),
            SyntaxKind::Mode => Some(SyntaxKindType::Follow),
            SyntaxKind::MonthP => Some(SyntaxKindType::Follow),
            SyntaxKind::Move => Some(SyntaxKindType::Follow),
            SyntaxKind::NameP => Some(SyntaxKindType::Follow),
            SyntaxKind::Names => Some(SyntaxKindType::Follow),
            SyntaxKind::National => Some(SyntaxKindType::Follow),
            SyntaxKind::Natural => Some(SyntaxKindType::Follow),
            SyntaxKind::Nchar => Some(SyntaxKindType::Follow),
            SyntaxKind::New => Some(SyntaxKindType::Follow),
            SyntaxKind::Next => Some(SyntaxKindType::Follow),
            SyntaxKind::Nfc => Some(SyntaxKindType::Follow),
            SyntaxKind::Nfd => Some(SyntaxKindType::Follow),
            SyntaxKind::Nfkc => Some(SyntaxKindType::Follow),
            SyntaxKind::Nfkd => Some(SyntaxKindType::Follow),
            SyntaxKind::No => Some(SyntaxKindType::Follow),
            SyntaxKind::None => Some(SyntaxKindType::Follow),
            SyntaxKind::Normalize => Some(SyntaxKindType::Follow),
            SyntaxKind::Normalized => Some(SyntaxKindType::Follow),
            SyntaxKind::Not => Some(SyntaxKindType::Follow),
            SyntaxKind::Nothing => Some(SyntaxKindType::Follow),
            SyntaxKind::Notify => Some(SyntaxKindType::Follow),
            SyntaxKind::Notnull => Some(SyntaxKindType::Follow),
            SyntaxKind::Nowait => Some(SyntaxKindType::Follow),
            SyntaxKind::NullP => Some(SyntaxKindType::Follow),
            SyntaxKind::Nullif => Some(SyntaxKindType::Follow),
            SyntaxKind::NullsP => Some(SyntaxKindType::Follow),
            SyntaxKind::Numeric => Some(SyntaxKindType::Follow),
            SyntaxKind::ObjectP => Some(SyntaxKindType::Follow),
            SyntaxKind::Of => Some(SyntaxKindType::Follow),
            SyntaxKind::Off => Some(SyntaxKindType::Follow),
            SyntaxKind::Offset => Some(SyntaxKindType::Follow),
            SyntaxKind::Oids => Some(SyntaxKindType::Follow),
            SyntaxKind::Old => Some(SyntaxKindType::Follow),
            SyntaxKind::On => Some(SyntaxKindType::Follow),
            SyntaxKind::Only => Some(SyntaxKindType::Follow),
            SyntaxKind::Operator => Some(SyntaxKindType::Follow),
            SyntaxKind::Option => Some(SyntaxKindType::Follow),
            SyntaxKind::Options => Some(SyntaxKindType::Follow),
            SyntaxKind::Or => Some(SyntaxKindType::Follow),
            SyntaxKind::Order => Some(SyntaxKindType::Follow),
            SyntaxKind::Ordinality => Some(SyntaxKindType::Follow),
            SyntaxKind::Others => Some(SyntaxKindType::Follow),
            SyntaxKind::OutP => Some(SyntaxKindType::Follow),
            SyntaxKind::OuterP => Some(SyntaxKindType::Follow),
            SyntaxKind::Over => Some(SyntaxKindType::Follow),
            SyntaxKind::Overlaps => Some(SyntaxKindType::Follow),
            SyntaxKind::Overlay => Some(SyntaxKindType::Follow),
            SyntaxKind::Overriding => Some(SyntaxKindType::Follow),
            SyntaxKind::Owned => Some(SyntaxKindType::Follow),
            SyntaxKind::Owner => Some(SyntaxKindType::Follow),
            SyntaxKind::Parallel => Some(SyntaxKindType::Follow),
            SyntaxKind::Parameter => Some(SyntaxKindType::Follow),
            SyntaxKind::Parser => Some(SyntaxKindType::Follow),
            SyntaxKind::Partial => Some(SyntaxKindType::Follow),
            SyntaxKind::Partition => Some(SyntaxKindType::Follow),
            SyntaxKind::Passing => Some(SyntaxKindType::Follow),
            SyntaxKind::Password => Some(SyntaxKindType::Follow),
            SyntaxKind::Placing => Some(SyntaxKindType::Follow),
            SyntaxKind::Plans => Some(SyntaxKindType::Follow),
            SyntaxKind::Policy => Some(SyntaxKindType::Follow),
            SyntaxKind::Position => Some(SyntaxKindType::Follow),
            SyntaxKind::Preceding => Some(SyntaxKindType::Follow),
            SyntaxKind::Precision => Some(SyntaxKindType::Follow),
            SyntaxKind::Preserve => Some(SyntaxKindType::Follow),
            SyntaxKind::Prepare => Some(SyntaxKindType::Follow),
            SyntaxKind::Prepared => Some(SyntaxKindType::Follow),
            SyntaxKind::Primary => Some(SyntaxKindType::Follow),
            SyntaxKind::Prior => Some(SyntaxKindType::Follow),
            SyntaxKind::Privileges => Some(SyntaxKindType::Follow),
            SyntaxKind::Procedural => Some(SyntaxKindType::Follow),
            SyntaxKind::Procedure => Some(SyntaxKindType::Follow),
            SyntaxKind::Procedures => Some(SyntaxKindType::Follow),
            SyntaxKind::Program => Some(SyntaxKindType::Follow),
            SyntaxKind::Publication => Some(SyntaxKindType::Follow),
            SyntaxKind::Quote => Some(SyntaxKindType::Follow),
            SyntaxKind::Range => Some(SyntaxKindType::Follow),
            SyntaxKind::Read => Some(SyntaxKindType::Follow),
            SyntaxKind::Real => Some(SyntaxKindType::Follow),
            SyntaxKind::Reassign => Some(SyntaxKindType::Follow),
            SyntaxKind::Recheck => Some(SyntaxKindType::Follow),
            SyntaxKind::Recursive => Some(SyntaxKindType::Follow),
            SyntaxKind::RefP => Some(SyntaxKindType::Follow),
            SyntaxKind::References => Some(SyntaxKindType::Follow),
            SyntaxKind::Referencing => Some(SyntaxKindType::Follow),
            SyntaxKind::Refresh => Some(SyntaxKindType::Follow),
            SyntaxKind::Reindex => Some(SyntaxKindType::Follow),
            SyntaxKind::RelativeP => Some(SyntaxKindType::Follow),
            SyntaxKind::Release => Some(SyntaxKindType::Follow),
            SyntaxKind::Rename => Some(SyntaxKindType::Follow),
            SyntaxKind::Repeatable => Some(SyntaxKindType::Follow),
            SyntaxKind::Replace => Some(SyntaxKindType::Follow),
            SyntaxKind::Replica => Some(SyntaxKindType::Follow),
            SyntaxKind::Reset => Some(SyntaxKindType::Follow),
            SyntaxKind::Restart => Some(SyntaxKindType::Follow),
            SyntaxKind::Restrict => Some(SyntaxKindType::Follow),
            SyntaxKind::Return => Some(SyntaxKindType::Follow),
            SyntaxKind::Returning => Some(SyntaxKindType::Follow),
            SyntaxKind::Returns => Some(SyntaxKindType::Follow),
            SyntaxKind::Revoke => Some(SyntaxKindType::Follow),
            SyntaxKind::Right => Some(SyntaxKindType::Follow),
            SyntaxKind::Role => Some(SyntaxKindType::Follow),
            SyntaxKind::Rollback => Some(SyntaxKindType::Follow),
            SyntaxKind::Rollup => Some(SyntaxKindType::Follow),
            SyntaxKind::Routine => Some(SyntaxKindType::Follow),
            SyntaxKind::Routines => Some(SyntaxKindType::Follow),
            SyntaxKind::Row => Some(SyntaxKindType::Follow),
            SyntaxKind::Rows => Some(SyntaxKindType::Follow),
            SyntaxKind::Rule => Some(SyntaxKindType::Follow),
            SyntaxKind::Savepoint => Some(SyntaxKindType::Follow),
            SyntaxKind::Schema => Some(SyntaxKindType::Follow),
            SyntaxKind::Schemas => Some(SyntaxKindType::Follow),
            SyntaxKind::Scroll => Some(SyntaxKindType::Follow),
            SyntaxKind::Search => Some(SyntaxKindType::Follow),
            SyntaxKind::SecondP => Some(SyntaxKindType::Follow),
            SyntaxKind::Security => Some(SyntaxKindType::Follow),
            SyntaxKind::Select => Some(SyntaxKindType::Follow),
            SyntaxKind::Sequence => Some(SyntaxKindType::Follow),
            SyntaxKind::Sequences => Some(SyntaxKindType::Follow),
            SyntaxKind::Serializable => Some(SyntaxKindType::Follow),
            SyntaxKind::Server => Some(SyntaxKindType::Follow),
            SyntaxKind::Session => Some(SyntaxKindType::Follow),
            SyntaxKind::SessionUser => Some(SyntaxKindType::Follow),
            SyntaxKind::Set => Some(SyntaxKindType::Follow),
            SyntaxKind::Sets => Some(SyntaxKindType::Follow),
            SyntaxKind::Setof => Some(SyntaxKindType::Follow),
            SyntaxKind::Share => Some(SyntaxKindType::Follow),
            SyntaxKind::Show => Some(SyntaxKindType::Follow),
            SyntaxKind::Similar => Some(SyntaxKindType::Follow),
            SyntaxKind::Simple => Some(SyntaxKindType::Follow),
            SyntaxKind::Skip => Some(SyntaxKindType::Follow),
            SyntaxKind::Smallint => Some(SyntaxKindType::Follow),
            SyntaxKind::Snapshot => Some(SyntaxKindType::Follow),
            SyntaxKind::Some => Some(SyntaxKindType::Follow),
            SyntaxKind::SqlP => Some(SyntaxKindType::Follow),
            SyntaxKind::Stable => Some(SyntaxKindType::Follow),
            SyntaxKind::StandaloneP => Some(SyntaxKindType::Follow),
            SyntaxKind::Start => Some(SyntaxKindType::Follow),
            SyntaxKind::Statement => Some(SyntaxKindType::Follow),
            SyntaxKind::Statistics => Some(SyntaxKindType::Follow),
            SyntaxKind::Stdin => Some(SyntaxKindType::Follow),
            SyntaxKind::Stdout => Some(SyntaxKindType::Follow),
            SyntaxKind::Storage => Some(SyntaxKindType::Follow),
            SyntaxKind::Stored => Some(SyntaxKindType::Follow),
            SyntaxKind::StrictP => Some(SyntaxKindType::Follow),
            SyntaxKind::StripP => Some(SyntaxKindType::Follow),
            SyntaxKind::Subscription => Some(SyntaxKindType::Follow),
            SyntaxKind::Substring => Some(SyntaxKindType::Follow),
            SyntaxKind::Support => Some(SyntaxKindType::Follow),
            SyntaxKind::Symmetric => Some(SyntaxKindType::Follow),
            SyntaxKind::Sysid => Some(SyntaxKindType::Follow),
            SyntaxKind::SystemP => Some(SyntaxKindType::Follow),
            SyntaxKind::Table => Some(SyntaxKindType::Follow),
            SyntaxKind::Tables => Some(SyntaxKindType::Follow),
            SyntaxKind::Tablesample => Some(SyntaxKindType::Follow),
            SyntaxKind::Tablespace => Some(SyntaxKindType::Follow),
            SyntaxKind::Temp => Some(SyntaxKindType::Follow),
            SyntaxKind::Template => Some(SyntaxKindType::Follow),
            SyntaxKind::Temporary => Some(SyntaxKindType::Follow),
            SyntaxKind::TextP => Some(SyntaxKindType::Follow),
            SyntaxKind::Then => Some(SyntaxKindType::Follow),
            SyntaxKind::Ties => Some(SyntaxKindType::Follow),
            SyntaxKind::Time => Some(SyntaxKindType::Follow),
            SyntaxKind::Timestamp => Some(SyntaxKindType::Follow),
            SyntaxKind::To => Some(SyntaxKindType::Follow),
            SyntaxKind::Trailing => Some(SyntaxKindType::Follow),
            SyntaxKind::Transaction => Some(SyntaxKindType::Follow),
            SyntaxKind::Transform => Some(SyntaxKindType::Follow),
            SyntaxKind::Treat => Some(SyntaxKindType::Follow),
            SyntaxKind::Trigger => Some(SyntaxKindType::Follow),
            SyntaxKind::Trim => Some(SyntaxKindType::Follow),
            SyntaxKind::TrueP => Some(SyntaxKindType::Follow),
            SyntaxKind::Truncate => Some(SyntaxKindType::Follow),
            SyntaxKind::Trusted => Some(SyntaxKindType::Follow),
            SyntaxKind::TypeP => Some(SyntaxKindType::Follow),
            SyntaxKind::TypesP => Some(SyntaxKindType::Follow),
            SyntaxKind::Uescape => Some(SyntaxKindType::Follow),
            SyntaxKind::Unbounded => Some(SyntaxKindType::Follow),
            SyntaxKind::Uncommitted => Some(SyntaxKindType::Follow),
            SyntaxKind::Unencrypted => Some(SyntaxKindType::Follow),
            SyntaxKind::Union => Some(SyntaxKindType::Follow),
            SyntaxKind::Unique => Some(SyntaxKindType::Follow),
            SyntaxKind::Unknown => Some(SyntaxKindType::Follow),
            SyntaxKind::Unlisten => Some(SyntaxKindType::Follow),
            SyntaxKind::Unlogged => Some(SyntaxKindType::Follow),
            SyntaxKind::Until => Some(SyntaxKindType::Follow),
            SyntaxKind::Update => Some(SyntaxKindType::Follow),
            SyntaxKind::User => Some(SyntaxKindType::Follow),
            SyntaxKind::Using => Some(SyntaxKindType::Follow),
            SyntaxKind::Vacuum => Some(SyntaxKindType::Follow),
            SyntaxKind::Valid => Some(SyntaxKindType::Follow),
            SyntaxKind::Validate => Some(SyntaxKindType::Follow),
            SyntaxKind::Validator => Some(SyntaxKindType::Follow),
            SyntaxKind::ValueP => Some(SyntaxKindType::Follow),
            SyntaxKind::Values => Some(SyntaxKindType::Follow),
            SyntaxKind::Varchar => Some(SyntaxKindType::Follow),
            SyntaxKind::Variadic => Some(SyntaxKindType::Follow),
            SyntaxKind::Varying => Some(SyntaxKindType::Follow),
            SyntaxKind::Verbose => Some(SyntaxKindType::Follow),
            SyntaxKind::VersionP => Some(SyntaxKindType::Follow),
            SyntaxKind::View => Some(SyntaxKindType::Follow),
            SyntaxKind::Views => Some(SyntaxKindType::Follow),
            SyntaxKind::Volatile => Some(SyntaxKindType::Follow),
            SyntaxKind::When => Some(SyntaxKindType::Follow),
            SyntaxKind::Where => Some(SyntaxKindType::Follow),
            SyntaxKind::WhitespaceP => Some(SyntaxKindType::Follow),
            SyntaxKind::Window => Some(SyntaxKindType::Follow),
            SyntaxKind::With => Some(SyntaxKindType::Follow),
            SyntaxKind::Within => Some(SyntaxKindType::Follow),
            SyntaxKind::Without => Some(SyntaxKindType::Follow),
            SyntaxKind::Work => Some(SyntaxKindType::Follow),
            SyntaxKind::Wrapper => Some(SyntaxKindType::Follow),
            SyntaxKind::Write => Some(SyntaxKindType::Follow),
            SyntaxKind::XmlP => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlattributes => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlconcat => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlelement => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlexists => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlforest => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlnamespaces => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlparse => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlpi => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlroot => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmlserialize => Some(SyntaxKindType::Follow),
            SyntaxKind::Xmltable => Some(SyntaxKindType::Follow),
            SyntaxKind::YearP => Some(SyntaxKindType::Follow),
            SyntaxKind::YesP => Some(SyntaxKindType::Follow),
            SyntaxKind::Zone => Some(SyntaxKindType::Follow),
            SyntaxKind::NotLa => Some(SyntaxKindType::Follow),
            SyntaxKind::NullsLa => Some(SyntaxKindType::Follow),
            SyntaxKind::WithLa => Some(SyntaxKindType::Follow),
            SyntaxKind::ModeTypeName => Some(SyntaxKindType::Follow),
            SyntaxKind::ModePlpgsqlExpr => Some(SyntaxKindType::Follow),
            SyntaxKind::ModePlpgsqlAssign1 => Some(SyntaxKindType::Follow),
            SyntaxKind::ModePlpgsqlAssign2 => Some(SyntaxKindType::Follow),
            SyntaxKind::ModePlpgsqlAssign3 => Some(SyntaxKindType::Follow),
            SyntaxKind::Uminus => Some(SyntaxKindType::Follow),
            SyntaxKind::Whitespace => Some(SyntaxKindType::Follow),
            SyntaxKind::Newline => Some(SyntaxKindType::Follow),
            SyntaxKind::Tab => Some(SyntaxKindType::Follow),
            _ => None,
        }
    }
}
